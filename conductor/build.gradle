buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.mobilej.unmock:UnMockPlugin:0.3.6'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'de.mobilej.unmock'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        consumerProguardFiles 'proguard-rules.txt'
    }
}

configurations {
    lintChecks
}

dependencies {
    testCompile rootProject.ext.junit
    testCompile rootProject.ext.roboelectric

    compile rootProject.ext.supportAnnotations

    lintChecks project(path: ':conductor-lint', configuration: 'lintChecks')
}

unMock {
    downloadFrom 'https://oss.sonatype.org/content/groups/public/org/robolectric/android-all/4.3_r2-robolectric-0/android-all-4.3_r2-robolectric-0.jar'

    keep "android.os.Bundle"
    keep "android.os.BaseBundle"
    keep "android.text.TextUtils"
}

task copyLintJar(type: Copy) {
    from(configurations.lintChecks) {
        rename { 'lint.jar' }
    }
    into 'build/intermediates/lint/'
}

project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}

//region conductor jar
//don't remove
//grabbed from http://stackoverflow.com/questions/16763090/how-to-export-library-to-jar-in-android-studio
task(makeJar) << {
    group "jar"
    // Empty. We'll add dependencies for this task below
}

// Generate jar creation tasks for all build variants
android.libraryVariants.all { variant ->
    String taskName = "makeJar${variant.name.capitalize()}"

    // Create a jar by extracting it from the assembled .aar
    // This ensures that products distributed via .aar and .jar exactly the same bits
    task(taskName, type: Copy) {
        group "jar"
        String archiveName = "${project.name}-${variant.name}"
        String outputDir = "${buildDir.getPath()}/outputs"

        dependsOn "assemble${variant.name.capitalize()}"
        from(zipTree("${outputDir}/aar/${archiveName}.aar"))
        into("${outputDir}/jar/")
        include('classes.jar')
        //        rename ('classes.jar', "${archiveName}-${variant.mergedFlavor.versionName}.jar")
        rename('classes.jar', "${archiveName}.jar")
    }

    makeJar.dependsOn tasks[taskName]
}

//endregion

ext.artifactId = 'conductor'

apply from: rootProject.file('dependencies.gradle')
apply from: rootProject.file('gradle-mvn-push.gradle')
